open RescriptMocha
open Mocha
open Belt
open TestHelpers

{{#with imported_contracts.[0] as | contract |}}
    {{#with contract.imported_events.[0] as | event |}}
describe("{{contract.name.capitalized}} contract {{event.name.capitalized}} event tests", () => {
  // Create mock db
  let mockDb = MockDb.createMockDb()

  let event = {{event.create_mock_code}};

  // Processing the event
  let mockDbUpdated = {{contract.name.capitalized}}.{{event.name.capitalized}}.processEvent({
    event,
    mockDb,
  })

  it("{{contract.name.capitalized}}_{{event.name.capitalized}}Entity is created correctly", () => {
    // Getting the actual entity from the mock database
    let actual{{contract.name.capitalized}}{{event.name.capitalized}}Entity =
      mockDbUpdated.entities.{{contract.name.uncapitalized}}_{{event.name.capitalized}}.get(
        {{event.entity_id_from_event_code}},
      )->Option.getExn

    // Creating the expected entity
    let expected{{contract.name.capitalized}}{{event.name.capitalized}}Entity: Types.{{contract.name.uncapitalized}}_{{event.name.capitalized}}Entity = {
      id: {{event.entity_id_from_event_code}},
      {{#each event.params as |param|}}
      {{param.param_name.uncapitalized}}: event.params.{{param.param_name.uncapitalized}}{{#if param.is_eth_address}}->Ethers.ethAddressToString{{/if}},
      {{/each}}
    }
    //Assert the expected {{contract.name.capitalized}} {{event.name.capitalized}} entity
    Assert.deep_equal(
      actual{{contract.name.capitalized}}{{event.name.capitalized}}Entity,
      expected{{contract.name.capitalized}}{{event.name.capitalized}}Entity,
      ~message="Actual {{contract.name.capitalized}}_{{event.name.capitalized}}Entity should be the same as the expected {{contract.name.capitalized}}_{{event.name.capitalized}}Entity",
    )
  })
})
    {{/with}}
{{/with}}
