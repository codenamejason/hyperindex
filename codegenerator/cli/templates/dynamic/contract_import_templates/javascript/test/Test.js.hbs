
{{#with imported_contracts.[0] as | contract |}}
const assert = require("assert");
const { TestHelpers } = require("generated");
const { MockDb, {{contract.name.capitalized}} } = TestHelpers;
{{/with}}

{{#with imported_contracts.[0] as | contract |}}
    {{#with contract.imported_events.[0] as | event |}}
describe("{{contract.name.capitalized}} contract {{event.name.capitalized}} event tests", () => {
  // Create mock db
  const mockDb = MockDb.createMockDb();

  // Creating mock for {{contract.name.capitalized}} contract {{event.name.capitalized}} event
  const event = {{event.create_mock_code}};

  // Processing the event
  const mockDbUpdated = {{contract.name.capitalized}}.{{event.name.capitalized}}.processEvent({
    event,
    mockDb,
  });

  it("{{contract.name.capitalized}}_{{event.name.capitalized}}Entity is created correctly", () => {
    // Getting the actual entity from the mock database
    let actual{{contract.name.capitalized}}{{event.name.capitalized}}Entity = mockDbUpdated.entities.{{contract.name.capitalized}}_{{event.name.capitalized}}.get(
      {{event.entity_id_from_event_code}}
    );

    // Creating the expected entity
    const expected{{contract.name.capitalized}}{{event.name.capitalized}}Entity = {
      id: {{event.entity_id_from_event_code}},
      {{#each event.params as |param|}}
      {{param.param_name.uncapitalized}}: event.params.{{param.param_name.uncapitalized}},
      {{/each}}
    };
    // Asserting that the entity in the mock database is the same as the expected entity
    assert.deepEqual(
      actual{{contract.name.capitalized}}{{event.name.capitalized}}Entity,
      expected{{contract.name.capitalized}}{{event.name.capitalized}}Entity,
      "Actual {{contract.name.capitalized}}{{event.name.capitalized}}Entity should be the same as the expected{{contract.name.capitalized}}{{event.name.capitalized}}Entity"
    );
  });
});
    {{/with}}
{{/with}}
