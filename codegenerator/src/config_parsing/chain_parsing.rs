use serde::{Deserialize};

#[derive(Debug, Deserialize)]
pub enum NetworkName {
    Mainnet,
    Goerli,
    Optimism,
    Bsc,
    PoaSokol,
    Chapel,
    PoaCore,
    Gnosis,
    Fuse,
    Matic,
    Fantom,
    ZkSync2Testnet,
    Boba,
    OptimismGoerli,
    Clover,
    Moonbeam,
    Moonriver,
    Mbase,
    FantomTestnet,
    ArbitrumOne,
    ArbitrumGoerli,
    Celo,
    Fuji,
    Avalanche,
    CeloAlfajores,
    Mumbai,
    Aurora,
    AuroraTestnet,
    Harmony,
    BaseTestnet,
    PolygonZkevm,
    ZkSyncEra,
    Sepolia,
}


pub fn serialize_network_name(network_name: &str) -> Option<NetworkName> {
    match network_name {
        "mainnet" => Some(NetworkName::Mainnet),
        "goerli" => Some(NetworkName::Goerli),
        "optimism" => Some(NetworkName::Optimism),
        "bsc" => Some(NetworkName::Bsc),
        "poa-sokol" => Some(NetworkName::PoaSokol),
        "chapel" => Some(NetworkName::Chapel),
        "poa-core" => Some(NetworkName::PoaCore),
        "gnosis" => Some(NetworkName::Gnosis),
        "fuse" => Some(NetworkName::Fuse),
        "matic" => Some(NetworkName::Matic),
        "fantom" => Some(NetworkName::Fantom),
        "zksync2-testnet" => Some(NetworkName::ZkSync2Testnet),
        "boba" => Some(NetworkName::Boba),
        "optimism-goerli" => Some(NetworkName::OptimismGoerli),
        "clover" => Some(NetworkName::Clover),
        "moonbeam" => Some(NetworkName::Moonbeam),
        "moonriver" => Some(NetworkName::Moonriver),
        "mbase" => Some(NetworkName::Mbase),
        "fantom-testnet" => Some(NetworkName::FantomTestnet),
        "arbitrum-one" => Some(NetworkName::ArbitrumOne),
        "arbitrum-goerli" => Some(NetworkName::ArbitrumGoerli),
        "celo" => Some(NetworkName::Celo),
        "fuji" => Some(NetworkName::Fuji),
        "avalanche" => Some(NetworkName::Avalanche),
        "celo-alfajores" => Some(NetworkName::CeloAlfajores),
        "mumbai" => Some(NetworkName::Mumbai),
        "aurora" => Some(NetworkName::Aurora),
        "aurora-testnet" => Some(NetworkName::AuroraTestnet),
        "harmony" => Some(NetworkName::Harmony),
        "base-testnet" => Some(NetworkName::BaseTestnet),
        "polygon-zkevm" => Some(NetworkName::PolygonZkevm),
        "zksync-era" => Some(NetworkName::ZkSyncEra),
        "sepolia" => Some(NetworkName::Sepolia),
        _ => None,
    }
}

// Function to return the chain ID of the network based on the network name
pub fn get_graph_protocol_chain_id(network_name: NetworkName) -> Option<i32> {
    match network_name {
        NetworkName::Mainnet => Some(1),
        NetworkName::Goerli => Some(5),
        NetworkName::Optimism => Some(10),
        NetworkName::Bsc => Some(56),
        NetworkName::PoaSokol => Some(77),
        NetworkName::Chapel => Some(97),
        NetworkName::PoaCore => Some(99),
        NetworkName::Gnosis => Some(100),
        NetworkName::Fuse => Some(122),
        NetworkName::Matic => Some(137),
        NetworkName::Fantom => Some(250),
        NetworkName::ZkSync2Testnet => Some(280),
        NetworkName::Boba => Some(288),
        NetworkName::OptimismGoerli => Some(420),
        NetworkName::Clover => Some(1023),
        NetworkName::Moonbeam => Some(1284),
        NetworkName::Moonriver => Some(1285),
        NetworkName::Mbase => Some(1287),
        NetworkName::FantomTestnet => Some(4002),
        NetworkName::ArbitrumOne => Some(42161),
        NetworkName::ArbitrumGoerli => Some(421613),
        NetworkName::Celo => Some(42220),
        NetworkName::Fuji => Some(43113),
        NetworkName::Avalanche => Some(43114),
        NetworkName::CeloAlfajores => Some(44787),
        NetworkName::Mumbai => Some(80001),
        NetworkName::Aurora => Some(1313161554),
        NetworkName::AuroraTestnet => Some(1313161555),
        NetworkName::Harmony => Some(1666600000),
        NetworkName::BaseTestnet => Some(84531),
        NetworkName::PolygonZkevm => Some(1101),
        NetworkName::ZkSyncEra => Some(324),
        NetworkName::Sepolia => Some(11155111),
    }
}
