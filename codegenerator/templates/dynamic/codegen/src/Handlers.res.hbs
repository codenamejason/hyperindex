type functionRegister = Loader | Handler

let mapFunctionRegisterName = (functionRegister: functionRegister) => {
  switch functionRegister {
  | Loader => "Loader"
  | Handler => "Handler"
  }
}

let getDefaultLoaderHandler: (
  ~functionRegister: functionRegister,
  ~eventName: string,
  ~event: 'a,
  ~context: 'b,
) => unit = (~functionRegister, ~eventName, ~event as _, ~context as _) => {
  let functionName = mapFunctionRegisterName(functionRegister)
  Js.Console.warn(
    // TODO: link to our docs.
    `Ignored ${eventName} event, as there is no ${functionName} registered. You need to implement a ${eventName}{functionName} method in your handler file.`,
  )
}

{{#each contracts as | contract |}}
module {{contract.name.capitalized}}Contract = {

  {{#each contract.events as | event |}}
  
  module {{event.name.capitalized}} = {
    %%private(
      let {{event.name.uncapitalized}}Loader = ref(None)
      let {{event.name.uncapitalized}}Handler = ref(None)
    )

    @genType
    let loader = (userLoader: (
      ~event: Types.eventLog<Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs>,
      ~context: Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.loaderContext
      ) => unit) => {
      {{event.name.uncapitalized}}Loader := Some(userLoader)
      }

    @genType
    let handler = (userHandler: (
      ~event: Types.eventLog<Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs>,
      ~context: Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.context,
    ) => unit) => {
      {{event.name.uncapitalized}}Handler := Some(userHandler)
    }

    let getLoader = () =>
    {{event.name.uncapitalized}}Loader.contents->Belt.Option.getWithDefault(getDefaultLoaderHandler(~eventName="{{event.name.capitalized}}", ~functionRegister=Loader))

    
    let getHandler = () => 
    {{event.name.uncapitalized}}Handler.contents->Belt.Option.getWithDefault(getDefaultLoaderHandler(~eventName="{{event.name.capitalized}}", ~functionRegister=Handler))
     
  }
  {{/each}}
}

{{/each}}

