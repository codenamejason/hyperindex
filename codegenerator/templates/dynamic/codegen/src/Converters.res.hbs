type contractName = string
type chainId = int
exception UndefinedEvent(string)
exception UndefinedContractAddress(Ethers.ethAddress, chainId)
exception UndefinedContractName(contractName, chainId)

module ContractNameAddressMappings: {
  let getContractNameFromAddress: (~chainId: int, ~contractAddress: Ethers.ethAddress) => string
  let addContractAddress: (
    ~chainId: int,
    ~contractName: string,
    ~contractAddress: Ethers.ethAddress,
  ) => unit
  let getAddressesFromContractName: (
    ~chainId: int,
    ~contractName: string,
  ) => array<Ethers.ethAddress>
} = {
  type addressToContractName = Js.Dict.t<contractName>
  type contractNameToAddresses = Js.Dict.t<Belt.Set.String.t>
  type chainAddresses = Js.Dict.t<addressToContractName>
  type chainContractNames = Js.Dict.t<contractNameToAddresses>

  let chainAddresses: chainAddresses = Js.Dict.empty()
  let chainContractNames: chainContractNames = Js.Dict.empty()

  let addContractAddress = (~chainId: int, ~contractName, ~contractAddress: Ethers.ethAddress) => {
    let chainIdStr = chainId->Belt.Int.toString
    let addressesToContractName =
      chainAddresses->Js.Dict.get(chainIdStr)->Belt.Option.getWithDefault(Js.Dict.empty())
    let contractNameToAddresses =
      chainContractNames->Js.Dict.get(chainIdStr)->Belt.Option.getWithDefault(Js.Dict.empty())

    addressesToContractName->Js.Dict.set(contractAddress->Ethers.ethAddressToString, contractName)

    let addresses =
      contractNameToAddresses
      ->Js.Dict.get(contractName)
      ->Belt.Option.getWithDefault(Belt.Set.String.empty)

    let updatedAddresses =
      addresses->Belt.Set.String.add(contractAddress->Ethers.ethAddressToString)

    contractNameToAddresses->Js.Dict.set(contractName, updatedAddresses)
  }

  let getContractNameFromAddress = (~chainId: int, ~contractAddress: Ethers.ethAddress) => {
    let optAddressesToContractName = chainAddresses->Js.Dict.get(chainId->Belt.Int.toString)

    switch optAddressesToContractName {
    | None =>
      Logging.error(`chainId ${chainId->Belt.Int.toString} was not constructed in address mapping`)
      UndefinedContractAddress(contractAddress, chainId)->raise
    | Some(addressesToContractName) =>
      let contractName =
        addressesToContractName->Js.Dict.get(contractAddress->Ethers.ethAddressToString)
      switch contractName {
      | None =>
        Logging.error(
          `contract address ${contractAddress->Ethers.ethAddressToString} on chainId ${chainId->Belt.Int.toString} was not found in address store`,
        )
        UndefinedContractAddress(contractAddress, chainId)->raise
      | Some(contractName) => contractName
      }
    }
  }

  let stringsToAddresses: array<string> => array<Ethers.ethAddress> = Obj.magic

  let getAddressesFromContractName = (~chainId, ~contractName) => {
    let optContractNameToAddresses = chainContractNames->Js.Dict.get(chainId->Belt.Int.toString)

    switch optContractNameToAddresses {
    | None =>
      Logging.error(
        `chainId ${chainId->Belt.Int.toString} was not constructed in contract name mapping`,
      )
      UndefinedContractName(contractName, chainId)->raise
    | Some(contractNameToAddresses) =>
      // this set can be empty, indicating a contract template with no registered addresses
      let addresses =
        contractNameToAddresses
        ->Js.Dict.get(contractName)
        ->Belt.Option.getWithDefault(Belt.Set.String.empty)

      addresses->Belt.Set.String.toArray->stringsToAddresses
    }
  }
}

let getContractNameFromAddress = (contractAddress: Ethers.ethAddress, chainId: int): string => {
  switch (contractAddress->Ethers.ethAddressToString, chainId->Belt.Int.toString) {
    {{#each chain_configs as |chain_config|}}
    {{#each chain_config.contracts as |contract|}}
    {{#each contract.address as |address|}}
    // TODO: make 'contracts' be per contract type/name, and have addresses as an array inside each contract.
    | ("{{address}}", "{{chain_config.network_config.id}}") => "{{contract.name.capitalized}}"
    {{/each}}
    {{/each}}
    {{/each}}
    | _ => UndefinedContractAddress(contractAddress, chainId)->raise
  }
}
let eventStringToEvent = (eventName: string, contractName: string): Types.eventName => {
  switch (eventName, contractName) {
    {{#each contracts as |contract|}}
    {{#each contract.events as |event|}}
    | ("{{event.name.capitalized}}", "{{contract.name.capitalized}}") => {{contract.name.capitalized}}Contract_{{event.name.capitalized}}Event
    {{/each}}
    {{/each}}
    | _ => UndefinedEvent(eventName)->raise
  }
}

{{#each contracts as |contract|}}
module {{contract.name.capitalized}} = {
{{#each contract.events as |event|}}
  let convert{{event.name.capitalized}}LogDescription = (log: Ethers.logDescription<'a>): Ethers.logDescription<
    Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs,
  > => {
    log->Obj.magic
  }

  let convert{{event.name.capitalized}}Log = async (
    logDescription: Ethers.logDescription<Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs>,
    ~log: Ethers.log,
    ~blockPromise: promise<Ethers.JsonRpcProvider.block>,
  ) => {
    let params: Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs = {
      {{#each event.params as | param |}}
        {{param.key}}: logDescription.args.{{param.key}},
      {{/each}}
    }
    let block = await blockPromise

    let {{event.name.uncapitalized}}Log: Types.eventLog<Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs> = {
      params,
      blockNumber: block.number,
      blockTimestamp: block.timestamp,
      blockHash: log.blockHash,
      srcAddress: log.address,
      transactionHash: log.transactionHash,
      transactionIndex: log.transactionIndex,
      logIndex: log.logIndex,
    }
    Types.{{contract.name.capitalized}}Contract_{{event.name.capitalized}}({{event.name.uncapitalized}}Log)
  }

{{/each}}
}

{{/each}}
