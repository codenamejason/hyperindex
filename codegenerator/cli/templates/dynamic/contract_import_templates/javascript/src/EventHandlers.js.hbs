/*
 *Please refer to https://docs.envio.dev for a thorough guide on all Envio indexer features*
 */

{{#each contracts as | contract |}}
let { {{contract.name.capitalized}}Contract } = require("../generated/src/Handlers.bs.js");
{{/each}}

const GLOBAL_EVENTS_SUMMARY_KEY = "GlobalEventsSummary";

const INITIAL_EVENTS_SUMMARY = {
  id: GLOBAL_EVENTS_SUMMARY_KEY,
  {{#each contracts as | contract |}}
  {{#each contract.events as |event|}}
  {{event.name.uncapitalized}}sCount: BigInt(0),
  {{/each}}
  {{/each}}
};

{{#each contracts as | contract |}}
{{#each contract.events as |event|}}
{{contract.name.capitalized}}Contract.{{event.name.capitalized}}.loader((event, context) => {
  context.EventsSummary.load(GLOBAL_EVENTS_SUMMARY_KEY);
});

{{contract.name.capitalized}}Contract.{{event.name.capitalized}}.handler((event, context) => {
  let summary = context.EventsSummary.get(GLOBAL_EVENTS_SUMMARY_KEY);

  let currentSummaryEntity = summary ?? INITIAL_EVENTS_SUMMARY;

  let nextSummaryEntity = {
    ...currentSummaryEntity,
    {{event.name.uncapitalized}}sCount: currentSummaryEntity.{{event.name.uncapitalized}}sCount + BigInt(1),
  };

  let {{event.name.uncapitalized}}Entity = {
    id: event.transactionHash + event.logIndex.toString(),
    {{#each event.params as |param|}}
    {{param.key.uncapitalized}}: event.params.{{param.key.uncapitalized}},
    {{/each}}
    eventsSummary: GLOBAL_EVENTS_SUMMARY_KEY,
  };

  context.EventsSummary.set(nextSummaryEntity);
  context.{{event.name.capitalized}}.set({{event.name.uncapitalized}}Entity);
});

{{/each}}
{{/each}}
