type functionRegister = Loader | Handler

let mapFunctionRegisterName = (functionRegister: functionRegister) => {
  switch functionRegister {
  | Loader => "Loader"
  | Handler => "Handler"
  }
}

// This set makes sure that the warning doesn't print for every event of a type, but rather only prints the first time.
let hasPrintedWarning = Set.make()

let getDefaultLoaderHandler: (
  ~functionRegister: functionRegister,
  ~eventName: string,
  ~event: 'a,
  ~context: 'b,
) => unit = (~functionRegister, ~eventName, ~event as _, ~context as _) => {
  let functionName = mapFunctionRegisterName(functionRegister)

  // Here we use this key to prevent flooding the users terminal with
  let repeatKey = `${eventName}-${functionName}`
  if !(hasPrintedWarning->Set.has(repeatKey)) {
    Logging.warn(
      // TODO: link to our docs.
      `Ignored ${eventName} event, as there is no ${functionName} registered. You need to implement a ${eventName}${functionName} method in your handler file. This will apply to all future ${eventName} events.`,
    )
    let _ = hasPrintedWarning->Set.add(repeatKey)
  }
}

{{#each contracts as | contract |}}
module {{contract.name.capitalized}}Contract = {

  {{#each contract.events as | event |}}  
  module {{event.name.capitalized}} = {

    type userHandlerType = (
      ~event: Types.eventLog<
        Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs,
      >,
      ~context: Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.handlerContext,
    ) => unit
    type userHandlerAsyncType = (
      ~event: Types.eventLog<
        Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs,
      >,
      ~context: Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.handlerContext,
    ) => Promise.t<unit>

    type handler = SyncHandler(userHandlerType) | AsyncHandler(userHandlerAsyncType)

    %%private(
      let {{event.name.uncapitalized}}Loader = ref(None)
      let {{event.name.uncapitalized}}Handler = ref(None)
    )

    @genType
    let loader = (userLoader: (
      ~event: Types.eventLog<Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs>,
      ~context: Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.loaderContext
      ) => unit) => {
      {{event.name.uncapitalized}}Loader := Some(userLoader)
      }

    @genType
    let handler = (userHandler: userHandlerType) => {
      {{event.name.uncapitalized}}Handler :=
        Some(SyncHandler(userHandler))
    }

    @genType
    let handlerAsync = (userHandler: userHandlerAsyncType) => {
      {{event.name.uncapitalized}}Handler :=
        Some(AsyncHandler(userHandler))
    }

    let getLoader = () =>
    {{event.name.uncapitalized}}Loader.contents->Belt.Option.getWithDefault(getDefaultLoaderHandler(~eventName="{{event.name.capitalized}}", ~functionRegister=Loader))

    
    let getHandler = () =>
      switch {{event.name.uncapitalized}}Handler.contents {
        | Some(handler) => handler        
        | None =>
          SyncHandler(getDefaultLoaderHandler(~eventName="{{event.name.capitalized}}", ~functionRegister=Handler))
     }
  }
  {{/each}}
}

{{/each}}

