{
  "language": "Solidity",
  "sources": {
    "contracts/SimpleBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// SimpleBank contract\ncontract SimpleBank {\n    mapping(address => uint256) private balances;\n    uint256 private totalBalance;\n    address private treasuryAddress;\n    uint256 private lastInterestCalculationTime;\n\n    event DepositMade(address indexed account, uint256 amount);\n    event WithdrawalMade(address indexed account, uint256 amount);\n    event TotalBalanceChanged(uint256 totalBalance);\n\n    constructor(address _treasuryAddress) {\n        treasuryAddress = _treasuryAddress;\n    }\n\n    // Deposit funds into the account\n    function deposit() external payable {\n        uint256 depositAmount = msg.value;\n        require(depositAmount > 0, \"Deposit amount should be greater than 0\");\n\n        // Calculate interest since last interest calculation time\n        uint256 interest = _calculateInterest();\n\n        // Update balance and total balance\n        balances[msg.sender] += depositAmount + interest;\n        totalBalance += depositAmount + interest;\n\n        // Emit event\n        emit DepositMade(msg.sender, depositAmount);\n\n        // Update last interest calculation time\n        lastInterestCalculationTime = block.timestamp;\n\n        // Update total balance event\n        emit TotalBalanceChanged(totalBalance);\n    }\n\n    // Withdraw funds from the account\n    function withdraw(uint256 _amount) external {\n        require(_amount > 0, \"Withdrawal amount should be greater than 0\");\n        require(_amount <= balances[msg.sender], \"Insufficient balance\");\n\n        // Calculate interest since last interest calculation time\n        uint256 interest = _calculateInterest();\n\n        // Update balance and total balance\n        balances[msg.sender] -= _amount;\n        totalBalance -= _amount;\n\n        // Emit event\n        emit WithdrawalMade(msg.sender, _amount);\n\n        // Update last interest calculation time\n        lastInterestCalculationTime = block.timestamp;\n\n        // Update total balance event\n        emit TotalBalanceChanged(totalBalance);\n\n        // Transfer funds to the user's account\n        (bool success, ) = msg.sender.call{value: _amount + interest}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    // Calculate interest earned by the user since the last calculation time\n    function _calculateInterest() private returns (uint256) {\n        Treasury treasuryContract = Treasury(treasuryAddress);\n        uint256 interest = treasuryContract.calculateInterest();\n\n        // Calculate interest earned by the user and update their balance\n        uint256 userInterest = (interest * balances[msg.sender]) / totalBalance;\n        balances[msg.sender] += userInterest;\n\n        // Emit event for interest calculation\n        // emit Treasury.InterestCalculated(interest);\n\n        return userInterest;\n    }\n\n    // Get the balance of the user\n    function getBalance() external view returns (uint256) {\n        return balances[msg.sender];\n    }\n\n    // Get the total balance of the bank\n    function getTotalBalance() external view returns (uint256) {\n        return totalBalance;\n    }\n}\n\ncontract Treasury {\n    uint256 private totalBalance;\n    uint256 private lastInterestCalculationTime;\n    uint256 private interestRate;\n\n    event InterestCalculated(uint256 interest);\n\n    constructor(uint256 _interestRate) {\n        interestRate = _interestRate;\n    }\n\n    // Calculate interest earned since the last calculation time\n    function calculateInterest() external returns (uint256) {\n        uint256 timeElapsed = block.timestamp - lastInterestCalculationTime;\n        uint256 interest = (totalBalance * interestRate * timeElapsed) / (365 * 24 * 60 * 60);\n\n        // Update last interest calculation time and total balance\n        lastInterestCalculationTime = block.timestamp;\n        totalBalance += interest;\n\n        // Emit event for interest calculation\n        emit InterestCalculated(interest);\n\n        return interest;\n    }\n\n    // Get the current interest rate\n    function getInterestRate() external view returns (uint256) {\n        return interestRate;\n    }\n\n    // Set the interest rate\n    function setInterestRate(uint256 _interestRate) external {\n        interestRate = _interestRate;\n    }\n\n    // Get the total balance in the treasury\n    function getTotalBalance() external view returns (uint256) {\n        return totalBalance;\n    }\n}\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}