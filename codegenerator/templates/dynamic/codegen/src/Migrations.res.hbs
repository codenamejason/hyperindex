let sql = Postgres.makeSql(~config=Config.db->Obj.magic /* TODO: make this have the correct type */)

module RawEventsTable = {
  let createRawEventsTable: unit => promise<unit> = async () => {
    @warning("-21")
    let _ = await (
      %raw("sql`
      DO $$ BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'event_type') THEN
          CREATE TYPE EVENT_TYPE AS ENUM (
          {{#each contracts as | contract |}}
          {{#each contract.events as | event |}}
          '{{contract.name.capitalized}}Contract_{{event.name.capitalized}}Event'{{#unless @last}},{{/unless}}
          {{/each}}{{#unless @last}},{{/unless}}
         {{/each}}
          );
        END IF;
      END $$;
      `")
    )
    @warning("-21")
    let _ = await (
      %raw("sql`
      CREATE TABLE public.raw_events (
        chain_id INTEGER NOT NULL,
        event_id NUMERIC NOT NULL,
        block_number INTEGER NOT NULL,
        log_index INTEGER NOT NULL,
        transaction_index INTEGER NOT NULL,
        transaction_hash TEXT NOT NULL,
        src_address TEXT NOT NULL,
        block_hash TEXT NOT NULL,
        block_timestamp INTEGER NOT NULL,
        event_type EVENT_TYPE NOT NULL,
        params JSON NOT NULL,
        db_write_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (chain_id, event_id)
      );
      `")
    )
  }

  @@warning("-21")
  let dropRawEventsTable = async () => {
    let _ = await %raw("sql`
      DROP TABLE IF EXISTS public.raw_events;
    `")
    let _ = await %raw("sql`
      DROP TYPE IF EXISTS EVENT_TYPE CASCADE;
    `")
  }
  @@warning("+21")
}

module DynamicContractRegistryTable = {
  let createDynamicContractRegistryTable: unit => promise<unit> = async () => {
    @warning("-21")
    let _ = await (
      %raw("sql`
      DO $$ BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'contract_type') THEN
          CREATE TYPE CONTRACT_TYPE AS ENUM (
          {{#each contracts as | contract |}}
          '{{contract.name.capitalized}}'{{#unless @last}},{{/unless}}
          {{/each}}
          );
        END IF;
      END $$;
      `")
    )
    @warning("-21")
    let _ = await (
      %raw("sql`
      CREATE TABLE public.dynamic_contract_registry (
        chain_id INTEGER NOT NULL,
        event_id NUMERIC NOT NULL,
        contract_address TEXT NOT NULL,
        contract_type CONTRACT_TYPE NOT NULL,
        PRIMARY KEY (chain_id, contract_address)
      );
      `")
    )
  }

  @@warning("-21")
  let dropDynamicContractRegistryTable = async () => {
    let _ = await %raw("sql`
      DROP TABLE IF EXISTS public.dynamic_contract_registry;
    `")
    let _ = await %raw("sql`
      DROP TYPE IF EXISTS EVENT_TYPE CASCADE;
    `")
  }
  @@warning("+21")
}

{{#each entities as |entity|}}
module {{entity.name.capitalized}} = {
  let create{{entity.name.capitalized}}Table:unit => promise<unit> = async () => {
    await %raw("sql`CREATE TABLE \"public\".\"{{entity.name.uncapitalized}}\" ({{#each entity.params as |param|}}{{#unless param.is_derived_from}}\"{{param.key}}\" {{param.type_pg}},{{/unless}}{{/each}} event_chain_id INTEGER NOT NULL, event_id NUMERIC NOT NULL, db_write_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE (\"id\"));`")
        
  }

  let delete{{entity.name.capitalized}}Table:unit => promise<unit> = async () => {
    // NOTE: we can refine the `IF EXISTS` part because this now prints to the terminal if the table doesn't exist (which isn't nice for the developer).
    await %raw("sql`DROP TABLE IF EXISTS \"public\".\"{{entity.name.uncapitalized}}\";`")
  }
}

{{/each}}

let deleteAllTables:unit => promise<unit> = async () => {
  // NOTE: we can refine the `IF EXISTS` part because this now prints to the terminal if the table doesn't exist (which isn't nice for the developer).
  @warning("-21")
  await %raw("sql.unsafe`DROP SCHEMA public CASCADE;CREATE SCHEMA public;GRANT ALL ON SCHEMA public TO postgres;GRANT ALL ON SCHEMA public TO public;`")
}

type t
@module external process: t = "process"

@send external exit: (t, unit) => unit = "exit"

// TODO: all the migration steps should run as a single transaction
let runUpMigrations = async (shouldExit) => {
  await RawEventsTable.createRawEventsTable()->Promise.catch(_err => {
    Logging.error(`Error creating raw events table`)->Promise.resolve
  })
  await DynamicContractRegistryTable.createDynamicContractRegistryTable()->Promise.catch(_err => {
    Logging.error(`Error creating dynamic contracts table`)->Promise.resolve
  })
// TODO: catch and handle query errors
{{#each entities as |entity|}}
  await {{entity.name.capitalized}}.create{{entity.name.capitalized}}Table()->Promise.catch(_err => {
    Logging.error(`Error creating {{entity.name.capitalized}} table`)->Promise.resolve
  })
{{/each}}
await TrackTables.trackAllTables()->Promise.catch(_err => {
    Logging.error(`Error tracking tables`)->Promise.resolve
  })
 if shouldExit {
    process->exit()
  }
}

let runDownMigrations = async (shouldExit) => {
  // {{#each entities as |entity|}}
  // await {{entity.name.capitalized}}.delete{{entity.name.capitalized}}Table()
  // {{/each}}

  await RawEventsTable.dropRawEventsTable()->Promise.catch(_err => {
    Logging.error("Please ensure the postgres database is running")
    Logging.error("Error dropping raw events table")->Promise.resolve
  })
  await DynamicContractRegistryTable.dropDynamicContractRegistryTable()->Promise.catch(_err => {
    Logging.error("Error dropping dynamic contracts table")->Promise.resolve
  })

  // NOTE: For now delete any remaining tables.
  await deleteAllTables()->Promise.catch(_err => {
    Logging.error("Error dropping entity tables")->Promise.resolve
  })
   if shouldExit {
    process->exit()
  }
}

let setupDb = async () => {
  // TODO: we should make a hash of the schema file (that gets stored in the DB) and either drop the tables and create new ones or keep this migration.
  //       for now we always run the down migration.
  // if (process.env.MIGRATE === "force" || hash_of_schema_file !== hash_of_current_schema)
  await runDownMigrations(false)
  // else
  //   await clearDb()

  await runUpMigrations(false)

  process->exit()
}
