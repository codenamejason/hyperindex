open RescriptMocha
open Mocha
open Belt
open TestHelpers

{{#with imported_contracts.[0] as | contract |}}
    {{#with contract.codegen_events.[0] as | event |}}
describe("{{contract.name.capitalized}} contract {{event.name.capitalized}} event tests", () => {
  // Create mock db
  let mockDb = MockDb.createMockDb()

  // Creating mock {{contract.name.capitalized}} contract {{event.name.capitalized}} event
  let mock{{contract.name.capitalized}}{{event.name.capitalized}}Event = {{contract.name.capitalized}}.{{event.name.capitalized}}.createMockEvent({
    {{#each event.params as | param |}}
    {{param.param_name.uncapitalized}}: {{param.default_value_rescript}},
    {{/each}}
    mockEventData: {
      chainId: 1,
      blockNumber: 0,
      blockTimestamp: 0,
      blockHash: Ethers.Constants.zeroHash,
      srcAddress: Addresses.defaultAddress,
      transactionHash: Ethers.Constants.zeroHash,
      transactionIndex: 0,
      logIndex: 0,
    },
  })

  // Processing the event
  let mockDbUpdated = {{contract.name.capitalized}}.{{event.name.capitalized}}.processEvent({
    event: mock{{contract.name.capitalized}}{{event.name.capitalized}}Event,
    mockDb,
  })

  it("{{contract.name.capitalized}}_{{event.name.capitalized}}Entity is created correctly", () => {
    // Getting the actual entity from the mock database
    let actual{{contract.name.capitalized}}{{event.name.capitalized}}Entity =
      mockDbUpdated.entities.{{contract.name.uncapitalized}}_{{event.name.capitalized}}.get(
        mock{{contract.name.capitalized}}{{event.name.capitalized}}Event.transactionHash ++ mock{{contract.name.capitalized}}{{event.name.capitalized}}Event.logIndex->Belt.Int.toString,
      )->Option.getExn

    // Creating the expected entity
    let expected{{contract.name.capitalized}}{{event.name.capitalized}}Entity: Types.{{contract.name.uncapitalized}}_{{event.name.capitalized}}Entity = {
      id: mock{{contract.name.capitalized}}{{event.name.capitalized}}Event.transactionHash ++ mock{{contract.name.capitalized}}{{event.name.capitalized}}Event.logIndex->Belt.Int.toString,
      {{#each event.params as |param|}}
      {{param.param_name.uncapitalized}}: mock{{contract.name.capitalized}}{{event.name.capitalized}}Event.params.{{param.param_name.uncapitalized}}{{#if param.is_eth_address}}->Ethers.ethAddressToString{{/if}},
      {{/each}}
    }
    //Assert the expected {{contract.name.capitalized}} {{event.name.capitalized}} entity
    Assert.deep_equal(
      actual{{contract.name.capitalized}}{{event.name.capitalized}}Entity,
      expected{{contract.name.capitalized}}{{event.name.capitalized}}Entity,
      ~message="Actual {{contract.name.capitalized}}_{{event.name.capitalized}}Entity should be the same as the expected {{contract.name.capitalized}}_{{event.name.capitalized}}Entity",
    )
  })
})
    {{/with}}
{{/with}}
