// Graphql Enum Type Variants
type enumType<'a> = {
  name: string,
  variants: array<'a>,
}

let mkEnum = (~name, ~variants) => {
  name,
  variants,
}

module type Enum = {
  type variants
  let enum: enumType<variants>
}

module EventType = {
  @genType
  type variants = 
  {{#each codegen_contracts as | contract |}}{{#each contract.codegen_events as | event |}}
    | @as("{{event.event_type.truncated_for_pg_enum_limit}}") {{event.event_type.full}}
  {{/each}}{{/each}}

  let schema = {{#if has_multiple_events }}
    S.union([
    {{#each codegen_contracts as | contract |}}
    {{#each contract.codegen_events as | event |}}
      S.literal({{event.event_type.full}}),
    {{/each}}
    {{/each}}
    ])
  {{else}}
    {{#each codegen_contracts as | contract |}}
    {{#each contract.codegen_events as | event |}}
      S.literal({{event.event_type.full}})
    {{/each}}
    {{/each}}
  {{/if}}

  let name = "EVENT_TYPE"
  let variants = [
  {{#each codegen_contracts as | contract |}}{{#each contract.codegen_events as | event |}}
    {{event.event_type.full}},
  {{/each}}{{/each}}
  ]
  let enum = mkEnum(~name, ~variants)
}

module ContractType = {
  @genType
  type variants = 
  {{#each codegen_contracts as | contract |}}
    | @as("{{contract.name.capitalized}}") {{contract.name.capitalized}}
  {{/each}}
  let name = "CONTRACT_TYPE"
  let variants = [
  {{#each codegen_contracts as | contract |}}
    {{contract.name.capitalized}},
  {{/each}}
  ]
  let enum = mkEnum(~name, ~variants)
}

module EntityType = {
  @genType
  type variants = 
  {{#each entities as | entity |}}
    | @as("{{entity.name.capitalized}}") {{entity.name.capitalized}}
  {{/each}}

  let schema = 
  {{#if entities.1}}
  {{!-- If there are multiple entities --}}
  S.union([
  {{#each entities as | entity |}}
    S.literal({{entity.name.capitalized}}), 
  {{/each}}
  ])
  {{else}}
  {{#each entities as | entity |}}
    S.literal({{entity.name.capitalized}})
  {{/each}}
  {{/if}}
  let name = "ENTITY_TYPE"
  let variants = [
  {{#each entities as | entity |}}
    {{entity.name.capitalized}},
  {{/each}}
  ]

  let enum = mkEnum(~name, ~variants)
}

{{#each gql_enums as | enum |}} 
module {{enum.name.capitalized}} = {
  @genType
  type variants = 
  {{#each enum.params as | param | }}
    | @as("{{param.original}}") {{param.capitalized}}
  {{/each}}
  let name = "{{enum.name.capitalized}}"
  let variants = [
  {{#each enum.params as | param | }}
    {{param.capitalized}},
  {{/each}}
  ]
  let enum = mkEnum(~name, ~variants)
  }
{{/each}}

let allEnums: array<module(Enum)> = [
  module(EventType), 
  module(ContractType), 
  module(EntityType),
{{#each gql_enums as | enum |}} 
  module({{enum.name.capitalized}}),
{{/each}}
]
//todo move logic into above modules
// Graphql Enum Type Variants
{{#each gql_enums as | enum |}} 
@genType.as("{{enum.name.capitalized}}")
type {{enum.name.uncapitalized}} = 
{{#each enum.params as | param | }}| @as("{{param.original}}") {{param.capitalized}}{{/each}}
let {{enum.name.uncapitalized}}Default = {{enum.params.[0].capitalized}}
let {{enum.name.uncapitalized}}Schema: S.t<{{enum.name.uncapitalized}}> = 
{{#if enum.has_multiple_params}} 
S.union([
  {{#each enum.params as | param | }}
    S.literal({{param.capitalized}}), 
  {{/each}}
])
{{else}}
  {{#each enum.params as | param | }}
    S.literal({{param.capitalized}})
  {{/each}}
{{/if}}
{{/each}}
