let getDefaultHandler: (string, ~event: 'a, ~context: 'b) => unit = (handlerName, ~event as _, ~context as _) => {
  Js.Console.warn(
    // TODO: link to our docs.
    `${handlerName} was not registered, ignoring event. Please register a handler for this event using the register${handlerName}.`,
  )
}

{{#each contracts as | contract |}}
module {{contract.name.capitalized}}Contract = {

  {{#each contract.events as | event |}}
  
  module {{event.name.capitalized}} = {
    %%private(
      let {{event.name.uncapitalized}}Loader = ref(None)
      let {{event.name.uncapitalized}}Handler = ref(None)
    )

    @genType
    let loader = (callback: (
      ~event: Types.eventLog<Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs>,
      ~context: Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.loaderContext
      ) => unit) => {
      {{event.name.uncapitalized}}Loader := Some(callback)
      }

    @genType
    let handler = (callback: (
      ~event: Types.eventLog<Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs>,
      ~context: Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.context,
    ) => unit) => {
      {{event.name.uncapitalized}}Handler := Some(callback)
    }

    let getLoader = () =>
    {{event.name.uncapitalized}}Loader.contents->Belt.Option.getWithDefault(getDefaultHandler("{{event.name.capitalized}}Loader"))
    
    let getHandler = () => 
    {{event.name.uncapitalized}}Handler.contents->Belt.Option.getWithDefault(getDefaultHandler("{{event.name.capitalized}}Handler"))
  }
  {{/each}}
}

{{/each}}

