// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Abis = require("generated/src/Abis.bs.js");
var Time = require("generated/src/Time.bs.js");
var Ethers = require("generated/src/bindings/Ethers.bs.js");
var Ethers$1 = require("ethers");
var Hardhat = require("hardhat");
var EventSyncing = require("generated/src/EventSyncing.bs.js");
var SetupRpcNode = require("./helpers/SetupRpcNode.bs.js");
var LiveGravatarTask = require("./helpers/LiveGravatarTask.bs.js");
var RegisterHandlers = require("generated/src/RegisterHandlers.bs.js");
var EventSubscription = require("generated/src/EventSubscription.bs.js");
var Mocha$RescriptMocha = require("rescript-mocha/src/Mocha.bs.js");
var Promise$RescriptMocha = require("rescript-mocha/src/Promise.bs.js");

Mocha$RescriptMocha.describe("E2E Mock Event Batch")(undefined, undefined, undefined, (function (param) {
        Promise$RescriptMocha.it("Complete E2E")(10000, undefined, undefined, (async function (param) {
                var gravatar = await SetupRpcNode.deployContract(undefined);
                await SetupRpcNode.setupNodeAndContracts(gravatar);
                var provider = Hardhat.ethers.provider;
                var localChainConfig_contracts = [{
                    name: "GravatarRegistry",
                    abi: Ethers.makeAbi(Abis.gravatarAbi),
                    address: Ethers$1.ethers.getAddress("0x5FbDB2315678afecb367f032d93F642f64180aa3"),
                    events: [
                      /* GravatarContract_NewGravatarEvent */0,
                      /* GravatarContract_UpdatedGravatarEvent */1
                    ]
                  }];
                var localChainConfig = {
                  provider: provider,
                  startBlock: 0,
                  chainId: 1337,
                  contracts: localChainConfig_contracts
                };
                RegisterHandlers.registerAllHandlers(undefined);
                await EventSyncing.processAllEvents(localChainConfig);
                console.log("starting events subscription");
                EventSubscription.startWatchingEventsOnRpc(localChainConfig, provider);
                console.log("submitting transactions");
                await LiveGravatarTask.liveGravatarTxs(gravatar);
                console.log("finish transactions");
                await Time.resolvePromiseAfterDelay(5000);
                console.log("finished");
              }));
      }));

var it_promise = Promise$RescriptMocha.it;

var it_skip_promise = Promise$RescriptMocha.it_skip;

exports.it_promise = it_promise;
exports.it_skip_promise = it_skip_promise;
/*  Not a pure module */
