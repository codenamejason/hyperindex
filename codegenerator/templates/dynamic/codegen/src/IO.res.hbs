module InMemoryStore = {
  let entityCurrentCrud = (currentCrud: option<Types.dbOp>, nextCrud: Types.dbOp): Types.dbOp => {
    switch (currentCrud, nextCrud) {
    | (Some(Set), Read)
    | (_, Set) =>
      Set
    | (Some(Read), Read) => Read
    | (Some(Delete), Read)
    | (_, Delete) =>
      Delete
    | (None, _) => nextCrud
    }
  }

  module RawEvents = {
    %%private(let rawEventsDict: ref<Js.Dict.t<Types.inMemoryStoreRow<Types.rawEventsEntity>>> = ref(
      Js.Dict.empty(),
    ))

    let setRawEvents = (~entity: Types.rawEventsEntity) => {
      let key = EventUtils.getEventIdKeyString(~chainId=entity.chainId, ~eventId=entity.eventId)

      rawEventsDict.contents->Js.Dict.set(
        key,
        {eventData: {chainId: entity.chainId, eventId: entity.eventId}, entity, dbOp: Set},
      )
    }

    let values = () => {
      rawEventsDict.contents->Js.Dict.values
    }
  }

  module DynamicContractRegistry = {
      %%private(let dynamicContractRegistryDict: ref<Js.Dict.t<Types.inMemoryStoreRow<Types.dynamicContractRegistryEntity>>> = ref(
        Js.Dict.empty(),
      ))

    let setDynamicContractRegistry = (~entity: Types.dynamicContractRegistryEntity) => {
      let key = EventUtils.getContractAddressKeyString(
        ~chainId=entity.chainId,
        ~contractAddress=entity.contractAddress,
      )

      dynamicContractRegistryDict.contents->Js.Dict.set(
        key,
        {
          eventData: {chainId: entity.chainId, eventId: entity.eventId->Ethers.BigInt.toString},
          entity,
          dbOp: Types.Set,
        },
      )

      let values = () => {
        dynamicContractRegistryDict.contents->Js.Dict.values
      }
    }
  }

{{#each entities as | entity |}}

  module {{entity.name.capitalized}} = {
    %%private(let {{entity.name.uncapitalized}}Dict: ref<Js.Dict.t<Types.inMemoryStoreRow<Types.{{entity.name.uncapitalized}}Entity>>> = ref(
      Js.Dict.empty(),
    ))

    let get{{entity.name.capitalized}} = (~id: string) => {
      let row = Js.Dict.get({{entity.name.uncapitalized}}Dict.contents, id)
      row->Belt.Option.map(row => row.entity)
    }

    let set{{entity.name.capitalized}} = (~entity: Types.{{entity.name.uncapitalized}}Entity, ~dbOp: Types.dbOp, ~eventData: Types.eventData) => {
      let {{entity.name.uncapitalized}}CurrentCrud = Js.Dict.get(
        {{entity.name.uncapitalized}}Dict.contents,
        entity.id,
      )->Belt.Option.map(row => {
        row.dbOp
      })

      {{entity.name.uncapitalized}}Dict.contents->Js.Dict.set(entity.id, {eventData, entity, dbOp: entityCurrentCrud({{entity.name.uncapitalized}}CurrentCrud, dbOp)})
    }
    let values = () => {
      {{entity.name.uncapitalized}}Dict.contents->Js.Dict.values
    }
    let resetStore = () => {
      {{entity.name.uncapitalized}}Dict := Js.Dict.empty()
    }
  }
  {{/each}}
  let resetStore = () => {
  {{#each entities as | entity |}}
    {{entity.name.capitalized}}.resetStore()
  {{/each}}
  }
}

type uniqueEntityReadIds = Js.Dict.t<Types.id>
type allEntityReads = Js.Dict.t<uniqueEntityReadIds>

let loadEntities = async (sql, entityBatch: array<Types.entityRead>) => {
  let loadLayer = ref(false)

  {{#each entities as | entity |}}
  let unique{{entity.name.capitalized}}Dict = Js.Dict.empty()
  {{/each}}

  let populateLoadAsEntityFunctions: ref<array<unit => unit>> = ref([])

  {{#each entities as | entity |}}
  let unique{{entity.name.capitalized}}AsEntityFieldArray: ref<array<string>> = ref([])
  {{/each}}

  let rec{{#each entities as | entity |}}{{#unless @first}}@warning("-27") and {{/unless}} {{entity.name.uncapitalized}}LinkedEntityLoader = (
    entityId: string,
    {{#if entity.relational_params.filtered_not_derived_from.[0]}}{{entity.name.uncapitalized}}Load: Types.{{entity.name.uncapitalized}}LoaderConfig,{{/if}}
    layer: int,
  ) => {
    if (!loadLayer.contents) {
      // NOTE: Always set this to true if it is false, I'm sure there are optimizations. Correctness over optimization for now.
      loadLayer := true
    }
    if Js.Dict.get(unique{{entity.name.capitalized}}Dict, entityId)->Belt.Option.isNone {
      let _ = unique{{entity.name.capitalized}}AsEntityFieldArray.contents->Js.Array2.push(entityId)
      let _ = Js.Dict.set(unique{{entity.name.capitalized}}Dict, entityId, entityId)
    }

    {{#each entity.relational_params.filtered_not_derived_from as | relational_param |}}
    //Loader is not used in every generated case
    //Suppressing unused variable warning 27 for these cases
    @warning("-27")
    switch {{entity.name.uncapitalized}}Load.load{{relational_param.relational_key.capitalized}} {
    | Some(load{{relational_param.mapped_entity.capitalized}}) =>
      let _ = populateLoadAsEntityFunctions.contents->Js.Array2.push(() => {
        let _ = InMemoryStore.{{entity.name.capitalized}}.get{{entity.name.capitalized}}(~id=entityId)->Belt.Option.map(
          {{entity.name.uncapitalized}}Entity => {
            {{#if (eq relational_param.relationship_type "array")}}
              let _ = {{entity.name.uncapitalized}}Entity.{{relational_param.relational_key.uncapitalized}}->Belt.Array.map(
                    {{relational_param.relational_key.uncapitalized}}Id =>
                {{relational_param.mapped_entity.uncapitalized}}LinkedEntityLoader({{relational_param.relational_key.uncapitalized}}Id, {{#each ../../entities as | internal_entity |}}{{#if (eq internal_entity.name.capitalized relational_param.mapped_entity.capitalized)}}{{#if internal_entity.relational_params.filtered_not_derived_from.[0]}}load{{relational_param.mapped_entity.capitalized}}, {{/if}}{{/if}}{{/each}}layer + 1)
              )
            {{else}}
              {{#if relational_param.is_optional}}
                let _ = {{entity.name.uncapitalized}}Entity.{{relational_param.relational_key.uncapitalized}}->Belt.Option.map(
                  {{relational_param.relational_key.uncapitalized}}Id =>
                    {{relational_param.mapped_entity.uncapitalized}}LinkedEntityLoader({{relational_param.relational_key.uncapitalized}}Id, {{#each ../../entities as | internal_entity |}}{{#if (eq internal_entity.name.capitalized relational_param.mapped_entity.capitalized)}}{{#if internal_entity.relational_params.filtered_not_derived_from.[0]}}load{{relational_param.mapped_entity.capitalized}}, {{/if}}{{/if}}{{/each}}layer + 1)
                )
              {{else}}
                let _ = {{relational_param.mapped_entity.uncapitalized}}LinkedEntityLoader({{entity.name.uncapitalized}}Entity.{{relational_param.relational_key.uncapitalized}}, {{#each ../../entities as | internal_entity |}}{{#if (eq internal_entity.name.capitalized relational_param.mapped_entity.capitalized)}}{{#if internal_entity.relational_params.filtered_not_derived_from.[0]}}load{{relational_param.mapped_entity.capitalized}}, {{/if}}{{/if}}{{/each}}layer + 1)
              {{/if}}
            {{/if}}
          })
      })
    | None => ()
    }
    {{/each}}
    ()
  }{{/each}}

  entityBatch->Belt.Array.forEach(readEntity => {
        switch readEntity {
    {{#each entities as | entity |}}
    | {{entity.name.capitalized}}Read(entityId{{#if entity.relational_params.filtered_not_derived_from.[0]}}, {{entity.name.uncapitalized}}Load{{/if}}) =>
      {{entity.name.uncapitalized}}LinkedEntityLoader(entityId{{#if entity.relational_params.filtered_not_derived_from.[0]}}, {{entity.name.uncapitalized}}Load{{/if}}, 0)
    {{/each}}
    }
  })

  while loadLayer.contents {
    loadLayer := false

  {{#each entities as | entity |}}
    if unique{{entity.name.capitalized}}AsEntityFieldArray.contents->Array.length > 0 {
      let {{entity.name.uncapitalized}}FieldEntitiesArray =
        await sql->DbFunctions.{{entity.name.capitalized}}.read{{entity.name.capitalized}}Entities(unique{{entity.name.capitalized}}AsEntityFieldArray.contents)

      {{entity.name.uncapitalized}}FieldEntitiesArray->Belt.Array.forEach(readRow => {
        let {entity, eventData} = DbFunctions.{{entity.name.capitalized}}.readRowToReadEntityData(readRow)
        InMemoryStore.{{entity.name.capitalized}}.set{{entity.name.capitalized}}(~entity, ~eventData, ~dbOp=Types.Read)
      })

      unique{{entity.name.capitalized}}AsEntityFieldArray := []
    }
  {{/each}}

  let functionsToExecute = populateLoadAsEntityFunctions.contents

  populateLoadAsEntityFunctions := []

  functionsToExecute->Belt.Array.forEach(func => func())
  }
}

let executeBatch = async sql => {
  let rawEventsRows = InMemoryStore.RawEvents.values()

  let setRawEventsPromise = sql => {
    // NOTE: This is commented out because raw events are always 'Set' operations. Likely that will stay the case even with reorgs protections in place since it'll just re-run the batch rather than edit a partially run batch.
    // TODO: remove if not necessary
    // let setRawEvents =
    //   rawEventsRows->Belt.Array.keepMap(rawEventsRow =>
    //     rawEventsRow.dbOp == Types.Set
    //       ? Some(rawEventsRow.entity)
    //       : None
    //   )
    let rawEventsToSet = rawEventsRows->Belt.Array.map(rawEventsRow => rawEventsRow.entity)

    if rawEventsToSet->Belt.Array.length > 0 {
      sql->DbFunctions.RawEvents.batchSetRawEvents(rawEventsToSet)
    } else {
      ()->Promise.resolve
    }
  }

  let dynamicContractRegistryRows =
    InMemoryStore.DynamicContractRegistry.values()

  // // NOTE: currently deleting dynamic contracts in unimplemented
  // let deleteDynamicContractRegistryIdsPromise = sql => {
  //   let deleteDynamicContractRegistryIds =
  //     dynamicContractRegistryRows
  //     ->Belt.Array.keepMap(dynamicContractRegistryRow =>
  //       dynamicContractRegistryRow.dbOp == Types.Delete
  //         ? Some(dynamicContractRegistryRow.entity)
  //         : None
  //     )
  //     ->Belt.Array.map(dynamicContractRegistry => (
  //       dynamicContractRegistry.chainId,
  //       dynamicContractRegistry.contractAddress,
  //     ))

  //   if deleteDynamicContractRegistryIds->Belt.Array.length > 0 {
  //     sql->DbFunctions.DynamicContractRegistry.batchDeleteDynamicContractRegistry(
  //       deleteDynamicContractRegistryIds,
  //     )
  //   } else {
  //     ()->Promise.resolve
  //   }
  // }

  let setDynamicContractRegistryPromise = sql => {
    let setDynamicContractRegistry =
      dynamicContractRegistryRows->Belt.Array.keepMap(dynamicContractRegistryRow =>
        // NOTE: the currently they will all be of type 'Set', but in the future we may add functionality to also delete contracts from the registry.
        dynamicContractRegistryRow.dbOp == Types.Set
          ? Some(dynamicContractRegistryRow.entity)
          : None
      )

    if setDynamicContractRegistry->Belt.Array.length > 0 {
      sql->DbFunctions.DynamicContractRegistry.batchSetDynamicContractRegistry(
        setDynamicContractRegistry,
      )
    } else {
      ()->Promise.resolve
    }
  }

  {{#each entities as | entity |}}
  let {{entity.name.uncapitalized}}Rows = InMemoryStore.{{entity.name.capitalized}}.values()

  let delete{{entity.name.capitalized}}IdsPromise = (sql) => {
    let delete{{entity.name.capitalized}}Ids =
      {{entity.name.uncapitalized}}Rows
      ->Belt.Array.keepMap({{entity.name.uncapitalized}}Row =>
        {{entity.name.uncapitalized}}Row.dbOp == Types.Delete ? Some({{entity.name.uncapitalized}}Row.entity) : None
      )
      ->Belt.Array.map({{entity.name.uncapitalized}} => {{entity.name.uncapitalized}}.id)

      if delete{{entity.name.capitalized}}Ids->Belt.Array.length > 0 {
        sql->DbFunctions.{{entity.name.capitalized}}.batchDelete{{entity.name.capitalized}}(delete{{entity.name.capitalized}}Ids)
      } else {
        ()->Promise.resolve
      }
  }
  let set{{entity.name.capitalized}}Promise = (sql) => {
    let set{{entity.name.capitalized}} =
      {{entity.name.uncapitalized}}Rows->Belt.Array.keepMap({{entity.name.uncapitalized}}Row =>
        {{entity.name.uncapitalized}}Row.dbOp == Types.Set
          ? Some({
            ...{{entity.name.uncapitalized}}Row,
            entity: {{entity.name.uncapitalized}}Row.entity->Types.{{entity.name.uncapitalized}}Entity_encode,
          }) 
          : None
      )

      if set{{entity.name.capitalized}}->Belt.Array.length > 0 {
         sql->DbFunctions.{{entity.name.capitalized}}.batchSet{{entity.name.capitalized}}(set{{entity.name.capitalized}})
      } else {
        ()->Promise.resolve
      }
  }

  {{/each}}

  let res = await sql->Postgres.beginSql((sql)=>{
     [
      sql->setRawEventsPromise,
      // sql->deleteDynamicContractRegistryIdsPromise, // NOTE: currently deleting dynamic contracts in unimplemented
      sql->setDynamicContractRegistryPromise,
      {{#each entities as | entity |}}
      sql->delete{{entity.name.capitalized}}IdsPromise,
      sql->set{{entity.name.capitalized}}Promise,
      {{/each}}
    ]
  })

  res
}
