exception UndefinedEvent(string)
let eventStringToEvent = (eventName: string, contractName: string): Types.eventName => {
  switch (eventName, contractName) {
    {{#each codegen_contracts as |contract|}}
    {{#each contract.codegen_events as |event|}}
    | ("{{event.name.capitalized}}", "{{contract.name.capitalized}}") => {{event.event_type.full}}
    {{/each}}
    {{/each}}
    | _ => UndefinedEvent(eventName)->raise
  }
}

{{#each codegen_contracts as |contract|}}
module {{contract.name.capitalized}} = {
{{#each contract.codegen_events as |event|}}
  let convert{{event.name.capitalized}}ViemDecodedEvent: Viem.decodedEvent<'a> => Viem.decodedEvent<
    Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs,
  > = Obj.magic

  {{#unless event.params}}
  @warning("-27")
  {{/unless}}
  let convert{{event.name.capitalized}}LogDescription = (log: Ethers.logDescription<'a>): Ethers.logDescription<
    Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs,
  > => {
    //Convert from the ethersLog type with indexs as keys to named key value object
    let ethersLog: 
      Ethers.logDescription<
        Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.ethersEventArgs
      >
      = log->Obj.magic
    let {args, name, signature, topic} = ethersLog

      {
        name,
        signature,
        topic,
        {{#if event.params}}
        args: {
        {{#each event.params as | param |}}
          {{param.param_name.uncapitalized}}: args.{{param.param_name.uncapitalized}},
        {{/each}}
        }
        {{else}}
        args: ()
        {{/if}}
      }
  }
  
  {{#unless event.params}}
  @warning("-27")
  {{/unless}}
  let convert{{event.name.capitalized}}Log = (
    logDescription: Ethers.logDescription<Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs>,
    ~log: Ethers.log,
    ~blockTimestamp: int,
    ~chainId: int,
    ~txOrigin: option<Ethers.ethAddress>,
  ) => {
    let params: Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs = 
    {{#if event.params}}
    {
      {{#each event.params as | param |}}
        {{param.param_name.uncapitalized}}: logDescription.args.{{param.param_name.uncapitalized}},
      {{/each}}
    }
    {{else}}
    ()
    {{/if}}

    let {{event.name.uncapitalized}}Log: Types.eventLog<Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs> = {
      params,
      chainId,
      txOrigin,
      blockNumber: log.blockNumber,
      blockTimestamp,
      blockHash: log.blockHash,
      srcAddress: log.address,
      transactionHash: log.transactionHash,
      transactionIndex: log.transactionIndex,
      logIndex: log.logIndex,
    }

    Types.{{contract.name.capitalized}}Contract_{{event.name.capitalized}}({{event.name.uncapitalized}}Log)
  }
  {{#unless event.params}}
  @warning("-27")
  {{/unless}}
  let convert{{event.name.capitalized}}LogViem = (
    decodedEvent: Viem.decodedEvent<Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs>,
    ~log: Ethers.log,
    ~blockTimestamp: int,
    ~chainId: int,
    ~txOrigin: option<Ethers.ethAddress>,
  ) => {
    let params: Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs = 
    {{#if event.params}}
    {
      {{#each event.params as | param |}}
        {{param.param_name.uncapitalized}}: decodedEvent.args.{{param.param_name.uncapitalized}},
      {{/each}}
    }
    {{else}}
    ()
    {{/if}}

    let {{event.name.uncapitalized}}Log: Types.eventLog<Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs> = {
      params,
      chainId,
      txOrigin,
      blockNumber: log.blockNumber,
      blockTimestamp,
      blockHash: log.blockHash,
      srcAddress: log.address,
      transactionHash: log.transactionHash,
      transactionIndex: log.transactionIndex,
      logIndex: log.logIndex,
    }

    Types.{{contract.name.capitalized}}Contract_{{event.name.capitalized}}({{event.name.uncapitalized}}Log)
  }

  let convert{{event.name.capitalized}}DecodedEventParams = ( 
  {{!-- Add underscore if there are no params, to avoid compiler warning of unused argument --}}
    {{#unless event.params[0]}}_{{/unless}}decodedEvent: HyperSyncClient.Decoder.decodedEvent,
  ): Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgs => {
    {{#if event.params[0]}}{{!--Only create this body if there are params.  Otherwise its always unit--}}
    open Belt
    let fields = [
      {{#each event.indexed_params as | param |}}
        "{{param.param_name.uncapitalized}}",
      {{/each}}
      {{#each event.body_params as | param |}}
        "{{param.param_name.uncapitalized}}",
      {{/each}}
    ]
    let values =
      Array.concat(decodedEvent.indexed, decodedEvent.body)->Array.map(
        HyperSyncClient.Decoder.toUnderlying,
      )
    Array.zip(fields, values)->Js.Dict.fromArray->Obj.magic
    {{else}}
      ()
    {{/if}}
  }
{{/each}}
}

{{/each}}

exception ParseError(Ethers.Interface.parseLogError)
exception UnregisteredContract(Ethers.ethAddress)

let parseEventEthers = (~log, ~blockTimestamp, ~contractInterfaceManager, ~chainId, ~txOrigin): Belt.Result.t<
  Types.event,
  _,
> => {
  let logDescriptionResult = contractInterfaceManager->ContractInterfaceManager.parseLogEthers(~log)
  switch logDescriptionResult {
  | Error(e) =>
    switch e {
    | ParseError(parseError) => ParseError(parseError)
    | UndefinedInterface(contractAddress) => UnregisteredContract(contractAddress)
    }->Error

  | Ok(logDescription) =>
    switch contractInterfaceManager->ContractInterfaceManager.getContractNameFromAddress(
      ~contractAddress=log.address,
    ) {
    | None => Error(UnregisteredContract(log.address))
    | Some(contractName) =>
      let event = switch eventStringToEvent(logDescription.name, contractName) {
      {{#each codegen_contracts as |contract|}}
      {{#each contract.codegen_events as |event|}}
        | {{event.event_type.full}} =>
            logDescription
            ->{{contract.name.capitalized}}.convert{{event.name.capitalized}}LogDescription
            ->{{contract.name.capitalized}}.convert{{event.name.capitalized}}Log(~log, ~blockTimestamp, ~chainId, ~txOrigin)
      {{/each}}
      {{/each}}
      }

      Ok(event)
    }
  }
}

let makeEventLog = (
  params: 'args,
  ~log: Ethers.log,
  ~blockTimestamp: int,
  ~chainId: int,
  ~txOrigin: option<Ethers.ethAddress>,
): Types.eventLog<'args> => {
  chainId,
  params,
  txOrigin,
  blockNumber: log.blockNumber,
  blockTimestamp,
  blockHash: log.blockHash,
  srcAddress: log.address,
  transactionHash: log.transactionHash,
  transactionIndex: log.transactionIndex,
  logIndex: log.logIndex,
}

let convertDecodedEvent = (
  event: HyperSyncClient.Decoder.decodedEvent,
  ~contractInterfaceManager,
  ~log: Ethers.log,
  ~blockTimestamp,
  ~chainId,
  ~txOrigin: option<Ethers.ethAddress>,
): result<Types.event, _> => {
  switch contractInterfaceManager->ContractInterfaceManager.getContractNameFromAddress(
    ~contractAddress=log.address,
  ) {
  | None => Error(UnregisteredContract(log.address))
  | Some(contractName) =>
    let event = switch Types.eventTopicToEventName(contractName, log.topics[0]) {
      {{#each codegen_contracts as |contract|}}
      {{#each contract.codegen_events as |event|}}
        | {{event.event_type.full}} =>
            event
            ->{{contract.name.capitalized}}.convert{{event.name.capitalized}}DecodedEventParams
            ->makeEventLog(~log, ~blockTimestamp, ~chainId, ~txOrigin)
            ->Types.{{contract.name.capitalized}}Contract_{{event.name.capitalized}}
      {{/each}}
     {{/each}}
    }
    Ok(event)
  }
}

let parseEvent = (~log, ~blockTimestamp, ~contractInterfaceManager, ~chainId, ~txOrigin): Belt.Result.t<
  Types.event,
  _,
> => {
 let decodedEventResult = contractInterfaceManager->ContractInterfaceManager.parseLogViem(~log)
  switch decodedEventResult {
  | Error(e) =>
    switch e {
    | ParseError(parseError) => ParseError(parseError)
    | UndefinedInterface(contractAddress) => UnregisteredContract(contractAddress)
    }->Error

  | Ok(decodedEvent) =>
    switch contractInterfaceManager->ContractInterfaceManager.getContractNameFromAddress(
      ~contractAddress=log.address,
    ) {
    | None => Error(UnregisteredContract(log.address))
    | Some(contractName) =>
      let event = switch eventStringToEvent(decodedEvent.eventName, contractName) {
      {{#each codegen_contracts as |contract|}}
      {{#each contract.codegen_events as |event|}}
        | {{event.event_type.full}} =>
            decodedEvent
            ->{{contract.name.capitalized}}.convert{{event.name.capitalized}}ViemDecodedEvent
            ->{{contract.name.capitalized}}.convert{{event.name.capitalized}}LogViem(~log, ~blockTimestamp, ~chainId, ~txOrigin)
      {{/each}}
     {{/each}}
      }

      Ok(event)
    }
  }
}

let decodeRawEventWith = (
  rawEvent: Types.rawEventsEntity,
  ~schema: S.t<'a>,
  ~variantAccessor: Types.eventLog<'a> => Types.event,
  ~chain,
  ~txOrigin: option<Ethers.ethAddress>,
): result<Types.eventBatchQueueItem, S.error> => {
  rawEvent.params
  ->S.parseJsonStringWith(schema)
  ->Belt.Result.map(params => {
    let event = {
      chainId: rawEvent.chainId,
      txOrigin,
      blockNumber: rawEvent.blockNumber,
      blockTimestamp: rawEvent.blockTimestamp,
      blockHash: rawEvent.blockHash,
      srcAddress: rawEvent.srcAddress,
      transactionHash: rawEvent.transactionHash,
      transactionIndex: rawEvent.transactionIndex,
      logIndex: rawEvent.logIndex,
      params,
    }->variantAccessor

    let queueItem: Types.eventBatchQueueItem = {
      timestamp: rawEvent.blockTimestamp,
      chain,
      blockNumber: rawEvent.blockNumber,
      logIndex: rawEvent.logIndex,
      event,
    }

    queueItem
  })
}

let parseRawEvent = (rawEvent: Types.rawEventsEntity, ~chain, ~txOrigin: option<Ethers.ethAddress>): result<Types.eventBatchQueueItem, S.error> => {
  rawEvent.eventType
  ->S.parseWith(Types.eventNameSchema)
  ->Belt.Result.flatMap(eventName => {
    switch eventName {
  {{#each codegen_contracts as |contract|}}
  {{#each contract.codegen_events as |event|}}
      | {{event.event_type.full}} =>
      rawEvent->decodeRawEventWith(
        ~schema=Types.{{contract.name.capitalized}}Contract.{{event.name.capitalized}}Event.eventArgsSchema,
        ~variantAccessor=event => Types.{{contract.name.capitalized}}Contract_{{event.name.capitalized}}(event),
        ~chain,
        ~txOrigin,
      )
  {{/each}}
  {{/each}}
    }
  })
}
