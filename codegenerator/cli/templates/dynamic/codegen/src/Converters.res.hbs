exception UndefinedEvent(string)
let eventStringToEvent = (eventName: string, contractName: string): Types.eventName => {
  switch (eventName, contractName) {
    {{#each codegen_contracts as |contract|}}
    {{#each contract.codegen_events as |event|}}
    | ("{{event.name.capitalized}}", "{{contract.name.capitalized}}") => {{event.event_type.full}}
    {{/each}}
    {{/each}}
    | _ => UndefinedEvent(eventName)->raise
  }
}

{{#each codegen_contracts as |contract|}}
module {{contract.name.capitalized}} = {
{{#each contract.codegen_events as |event|}}
  module {{event.name.capitalized}} = {
    let convertViemDecodedEvent: Viem.decodedEvent<'a> => Viem.decodedEvent<
      Types.{{contract.name.capitalized}}.{{event.name.capitalized}}.eventArgs,
    > = X.magic

    {{#unless event.params}}
    @warning("-27")
    {{/unless}}
    let convertLogViem = (
      decodedEvent: Viem.decodedEvent<Types.{{contract.name.capitalized}}.{{event.name.capitalized}}.eventArgs>,
      ~log: Ethers.log,
      ~blockTimestamp: int,
      ~chainId: int,
      ~txMetadataParams: option<HyperSync.txMetadataType>,
    ) => {
      let params: Types.{{contract.name.capitalized}}.{{event.name.capitalized}}.eventArgs = 
      {{#if event.params}}
      {
        {{#each event.params as | param |}}
        {{param.res_name}}: decodedEvent.args.{{param.res_name}},
        {{/each}}
      }
      {{else}}
      ()
      {{/if}}

      let eventLog: Types.eventLog<Types.{{contract.name.capitalized}}.{{event.name.capitalized}}.eventArgs> = {
        params,
        chainId,
        txOrigin: txMetadataParams->Belt.Option.flatMap(tx => tx.txOrigin),
        txTo: txMetadataParams->Belt.Option.flatMap(tx => tx.txTo),
        txGasPrice: txMetadataParams->Belt.Option.flatMap(tx => tx.gasPrice),
        txGasUsed: txMetadataParams->Belt.Option.flatMap(tx => tx.gasUsed),
        txMaxFeePerGas: txMetadataParams->Belt.Option.flatMap(tx => tx.maxFeePerGas),
        txMaxPriorityFeePerGas: txMetadataParams->Belt.Option.flatMap(tx =>
          tx.maxPriorityFeePerGas
        ),
        blockNumber: log.blockNumber,
        blockTimestamp,
        blockHash: log.blockHash,
        srcAddress: log.address,
        transactionHash: log.transactionHash,
        transactionIndex: log.transactionIndex,
        logIndex: log.logIndex,
      }

      Types.{{contract.name.capitalized}}_{{event.name.capitalized}}(eventLog)
    }

    let convertDecodedEventParams = ( 
    {{!-- Add underscore if there are no params, to avoid compiler warning of unused argument --}}
      {{#unless event.params[0]}}_{{/unless}}decodedEvent: HyperSyncClient.Decoder.decodedEvent,
    ): Types.{{contract.name.capitalized}}.{{event.name.capitalized}}.eventArgs => {
      {{#if event.params[0]}}{{!--Only create this body if there are params.  Otherwise its always unit--}}
      {
        {{#each event.indexed_params as | param index |}}
        {{param.res_name}}: decodedEvent.indexed->Js.Array2.unsafe_get({{index}})->HyperSyncClient.Decoder.toUnderlying->X.magic,
        {{/each}}
        {{#each event.body_params as | param index |}}
        {{param.res_name}}: decodedEvent.body->Js.Array2.unsafe_get({{index}})->HyperSyncClient.Decoder.toUnderlying->X.magic,
        {{/each}}
      }
      {{else}}
      ()
      {{/if}}
    }
  }
{{/each}}
}

{{/each}}

exception ParseError(Ethers.Interface.parseLogError)
exception UnregisteredContract(Ethers.ethAddress)

let makeEventLog = (
  params: 'args,
  ~log: Ethers.log,
  ~blockTimestamp: int,
  ~chainId: int,
  ~txMetadataParams: option<HyperSync.txMetadataType>,
): Types.eventLog<'args> => {
  chainId,
  params,
  txOrigin: txMetadataParams->Belt.Option.flatMap(tx => tx.txOrigin),
  txTo: txMetadataParams->Belt.Option.flatMap(tx => tx.txTo),
  txGasPrice: txMetadataParams->Belt.Option.flatMap(tx => tx.gasPrice),
  txGasUsed: txMetadataParams->Belt.Option.flatMap(tx => tx.gasUsed),
  txMaxFeePerGas: txMetadataParams->Belt.Option.flatMap(tx => tx.maxFeePerGas),
  txMaxPriorityFeePerGas: txMetadataParams->Belt.Option.flatMap(tx => tx.maxPriorityFeePerGas),
  blockNumber: log.blockNumber,
  blockTimestamp,
  blockHash: log.blockHash,
  srcAddress: log.address,
  transactionHash: log.transactionHash,
  transactionIndex: log.transactionIndex,
  logIndex: log.logIndex,
}

let convertDecodedEvent = (
  event: HyperSyncClient.Decoder.decodedEvent,
  ~contractInterfaceManager,
  ~log: Ethers.log,
  ~blockTimestamp,
  ~chainId,
  ~txMetadataParams: option<HyperSync.txMetadataType>,
): result<Types.event, _> => {
  switch contractInterfaceManager->ContractInterfaceManager.getContractNameFromAddress(
    ~contractAddress=log.address,
  ) {
  | None => Error(UnregisteredContract(log.address))
  | Some(contractName) =>
    let event = switch Types.eventTopicToEventName(contractName, log.topics[0]) {
      {{#each codegen_contracts as |contract|}}
      {{#each contract.codegen_events as |event|}}
        | {{event.event_type.full}} =>
            event
            ->{{contract.name.capitalized}}.{{event.name.capitalized}}.convertDecodedEventParams
            ->makeEventLog(~log, ~blockTimestamp, ~chainId, ~txMetadataParams)
            ->Types.{{contract.name.capitalized}}_{{event.name.capitalized}}
      {{/each}}
     {{/each}}
    }
    Ok(event)
  }
}

let parseEvent = (~log, ~blockTimestamp, ~contractInterfaceManager, ~chainId, ~txMetadataParams: option<HyperSync.txMetadataType>): Belt.Result.t<
  Types.event,
  _,
> => {
 let decodedEventResult = contractInterfaceManager->ContractInterfaceManager.parseLogViem(~log)
  switch decodedEventResult {
  | Error(e) =>
    switch e {
    | ParseError(parseError) => ParseError(parseError)
    | UndefinedInterface(contractAddress) => UnregisteredContract(contractAddress)
    }->Error

  | Ok(decodedEvent) =>
    switch contractInterfaceManager->ContractInterfaceManager.getContractNameFromAddress(
      ~contractAddress=log.address,
    ) {
    | None => Error(UnregisteredContract(log.address))
    | Some(contractName) =>
      let event = switch eventStringToEvent(decodedEvent.eventName, contractName) {
      {{#each codegen_contracts as |contract|}}
      {{#each contract.codegen_events as |event|}}
        | {{event.event_type.full}} =>
            decodedEvent
            ->{{contract.name.capitalized}}.{{event.name.capitalized}}.convertViemDecodedEvent
            ->{{contract.name.capitalized}}.{{event.name.capitalized}}.convertLogViem(~log, ~blockTimestamp, ~chainId, ~txMetadataParams)
      {{/each}}
     {{/each}}
      }

      Ok(event)
    }
  }
}

let decodeRawEventWith = (
  rawEvent: TablesStatic.RawEvents.t,
  ~schema: S.t<'a>,
  ~variantAccessor: Types.eventLog<'a> => Types.event,
  ~chain,
): result<Types.eventBatchQueueItem, S.error> => {
  rawEvent.params
  ->S.parseJsonStringWith(schema)
  ->Belt.Result.map(params => {
    let event = {
      chainId: rawEvent.chainId,
      txOrigin: None,
      txTo: None,
      txGasPrice: None,
      txGasUsed: None,
      txMaxFeePerGas: None,
      txMaxPriorityFeePerGas: None,
      blockNumber: rawEvent.blockNumber,
      blockTimestamp: rawEvent.blockTimestamp,
      blockHash: rawEvent.blockHash,
      srcAddress: rawEvent.srcAddress,
      transactionHash: rawEvent.transactionHash,
      transactionIndex: rawEvent.transactionIndex,
      logIndex: rawEvent.logIndex,
      params,
    }->variantAccessor

    let queueItem: Types.eventBatchQueueItem = {
      timestamp: rawEvent.blockTimestamp,
      chain,
      blockNumber: rawEvent.blockNumber,
      logIndex: rawEvent.logIndex,
      event,
    }

    queueItem
  })
}


let parseRawEvent = (rawEvent: TablesStatic.RawEvents.t, ~chain): result<
  Types.eventBatchQueueItem,
  S.error,
> => {  switch rawEvent.eventType {
  {{#each codegen_contracts as |contract|}}
  {{#each contract.codegen_events as |event|}}
      | {{event.event_type.full}} =>
      rawEvent->decodeRawEventWith(
        ~schema=Types.{{contract.name.capitalized}}.{{event.name.capitalized}}.eventArgsSchema,
        ~variantAccessor=event => Types.{{contract.name.capitalized}}_{{event.name.capitalized}}(event),
        ~chain,
      )
  {{/each}}
  {{/each}}
  }
}
