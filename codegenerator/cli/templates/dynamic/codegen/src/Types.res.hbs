//*************
//***ENTITIES**
//*************
@genType.as("Id")
type id = string

@genType
type contractRegistrations = {
  //TODO only add contracts we've registered for the event in the config
  {{#each codegen_contracts as |contract| }}
  add{{contract.name.capitalized}}: (Ethers.ethAddress) => unit,
  {{/each}}
}

@genType
type entityLoaderContext<'entity> = {get: id => promise<option<'entity>>}

@genType
type loaderContext = {
  log: Logs.userLogger,
  {{#each entities as | entity |}}
  @as("{{entity.name.original}}") {{entity.name.uncapitalized}}: entityLoaderContext<Entities.{{entity.name.capitalized}}.t>,
  {{/each}}
}

@genType
type entityHandlerContext<'entity> = {
  get: id => promise<option<'entity>>,
  set: 'entity => unit,
  deleteUnsafe: id => unit,
}


@genType
type handlerContext = {
  log: Logs.userLogger,
  {{#each entities as | entity |}}
  @as("{{entity.name.original}}") {{entity.name.uncapitalized}}: entityHandlerContext<Entities.{{entity.name.capitalized}}.t>,
  {{/each}}
}

//Re-exporting types for backwards compatability
{{#each entities as | entity |}}
@genType.as("{{entity.name.original}}")
type {{entity.name.uncapitalized}} = Entities.{{entity.name.capitalized}}.t
{{/each}}

type eventIdentifier = {
  chainId: int,
  blockTimestamp: int,
  blockNumber: int,
  logIndex: int,
}

type entityUpdateAction<'entityType> =
  | Set('entityType)
  | Delete

type entityUpdate<'entityType> = {
  eventIdentifier: eventIdentifier,
  shouldSaveHistory: bool,
  entityId: id,
  entityUpdateAction: entityUpdateAction<'entityType>,
}

let mkEntityUpdate = (~shouldSaveHistory=true, ~eventIdentifier, ~entityId, entityUpdateAction) => {
  entityId,
  shouldSaveHistory,
  eventIdentifier,
  entityUpdateAction,
}

type entityValueAtStartOfBatch<'entityType> =
  | NotSet // The entity isn't in the DB yet
  | AlreadySet('entityType)

type existingValueInDb<'entityType> =
  | Retrieved(entityValueAtStartOfBatch<'entityType>)
  // NOTE: We use an postgres function solve the issue of this entities previous value not being known.
  | Unknown

type updatedValue<'entityType> = {
  // Initial value within a batch
  initial: existingValueInDb<'entityType>,
  latest: entityUpdate<'entityType>,
  history: array<entityUpdate<'entityType>>,
}
@genType
type inMemoryStoreRowEntity<'entityType> =
  | Updated(updatedValue<'entityType>)
  | InitialReadFromDb(entityValueAtStartOfBatch<'entityType>) // This means there is no change from the db.

//*************
//**CONTRACTS**
//*************
type address = Ethers.ethAddress

module Log = {
  type t = {
    address: address,
    data: string,
    topics: array<Ethers.EventFilter.topic>,
    logIndex: int,
  }

  let fieldNames = ["address", "data", "topics", "logIndex"]
}

module Transaction = {
  @genType
  type t = {
    {{!-- Selectable fields --}}
    {{#each field_selection.transaction_fields as | field |}}
    {{field.name.camel}}: {{field.res_type}},
    {{/each}}
  }

  let schema: S.schema<t> = S.object((_s): t => {
    {{#each field_selection.transaction_fields as | field |}}
    {{field.name.camel}}: _s.field("{{field.name.camel}}", {{field.res_schema_code}}),
    {{/each}}
  })

  let querySelection: HyperSyncClient.QueryTypes.transactionFieldSelection = [
    {{#each field_selection.transaction_fields as | field |}}
    {{field.name.pascal}},
    {{/each}}
  ]

  let fieldNames: array<string> = [
    {{#each field_selection.transaction_fields as | field |}}
    "{{field.name.camel}}",
    {{/each}}
  ]
}

module Block = {
  type selectableFields = {
    {{!-- Selectable fields --}}
    {{#each field_selection.block_fields as | field |}}
    {{field.name.camel}}: {{field.res_type}},
    {{/each}}
  }

  let schema: S.schema<selectableFields> = S.object((_s): selectableFields => {
    {{#each field_selection.block_fields as | field |}}
    {{field.name.camel}}: _s.field("{{field.name.camel}}", {{field.res_schema_code}}),
    {{/each}}
  })

  @genType
  type t = {
    {{!-- Mandatory fields --}}
    number: int,
    timestamp: int,
    hash: string,
    ...selectableFields,
  }

  let getSelectableFields = ({
    {{#each field_selection.block_fields as | field |}}
    {{field.name.camel}},
    {{/each}}
    }: t): selectableFields => {
    {{#each field_selection.block_fields as | field |}}
    {{field.name.camel}}: {{field.name.camel}},
    {{/each}}
    }

  let querySelection: HyperSyncClient.QueryTypes.blockFieldSelection = [
    Number,
    Timestamp,
    Hash,
    {{#each field_selection.block_fields as | field |}}
    {{field.name.pascal}},
    {{/each}}
  ]

  let fieldNames: array<string> = [
    "number",
    "timestamp",
    "hash",
    {{#each field_selection.block_fields as | field |}}
    "{{field.name.camel}}",
    {{/each}}
  ]
}

@genType.as("EventLog")
type eventLog<'a> = {
  params: 'a,
  chainId: int,
  srcAddress: Ethers.ethAddress,
  logIndex: int,
  transaction: Transaction.t,
  block: Block.t,
}

@genType
type eventName = Enums.EventType.t

let eventNameSchema = Enums.EventType.schema

let eventNameToString = (eventName: eventName) => switch eventName {
  {{#each codegen_contracts as | contract |}}
  {{#each contract.codegen_events as | event |}}
    | {{event.event_type.full}} => "{{event.name.capitalized}}"
  {{/each}}
  {{/each}}
}

module type Event = {
  let eventName: Enums.EventType.t
  type eventArgs
  let eventArgsSchema: S.schema<eventArgs>
}

type internalEventArgs
external eventToInternal: eventLog<'a> => eventLog<internalEventArgs> = "%identity"
external eventModToInternal: module(Event with type eventArgs = 'a) => module(Event with type eventArgs = internalEventArgs) = "%identity"

{{#each codegen_contracts as | contract |}}
module {{contract.name.capitalized}} = {
{{#each contract.codegen_events as | event |}}
  module {{event.name.capitalized}} = {
    let eventName = Enums.EventType.{{event.event_type.full}}

    @genType
    type eventArgs = 
    {{#if event.params}}
    {
      {{#each event.params as | param |}}
      @as("{{param.js_name}}")
      {{param.res_name}}: {{param.res_type}},
      {{/each}}
    }
    {{else}}
    unit
    {{/if}}

    let eventArgsSchema = 
      {{#if event.params}}
      S.object(s => {
      {{#each event.params as | param |}}
        {{param.res_name}}: s.field("{{param.res_name}}", {{param.res_schema_code}}),
      {{/each}}
      })
      {{else}}
      S.literal(%raw(`null`))->S.variant((. _) => ())
      {{/if}}

    @genType.as("{{contract.name.capitalized}}_{{event.name.capitalized}}_EventLog")
    type log = eventLog<eventArgs>
  }

{{/each}}
}

{{/each}}

exception UnknownEvent(string, string)
let eventTopicToEventMod = (contractName, topic0): module(Event with type eventArgs = internalEventArgs) => {
  switch (contractName, topic0) {
{{#each codegen_contracts as | contract |}}
{{#each contract.codegen_events as | event |}}
  | ("{{contract.name.capitalized}}", "{{event.topic0}}") => module({{contract.name.capitalized}}.{{event.name.capitalized}})->eventModToInternal
{{/each}}
{{/each}}
  | (contractName, topic0) => UnknownEvent(contractName, topic0)->raise
  }
}

@genType
type chainId = int

type eventBatchQueueItem = {
  timestamp: int,
  chain: ChainMap.Chain.t,
  blockNumber: int,
  logIndex: int,
  event: eventLog<internalEventArgs>,
  eventMod: module(Event with type eventArgs = internalEventArgs),
  //Default to false, if an event needs to
  //be reprocessed after it has loaded dynamic contracts
  //This gets set to true and does not try and reload events
  hasRegisteredDynamicContracts?: bool,
}
