open RescriptMocha
open Mocha
open Belt
open TestHelpers

let globalEventsSummaryKey = "GlobalEventsSummary"

module BigInt = Ethers.BigInt

let mockEventsSummaryEntity: Types.eventsSummaryEntity = {
  id: globalEventsSummaryKey,
  {{#each imported_contracts as | contract |}}
    {{#each contract.codegen_events as | event |}}
  {{contract.name.uncapitalized}}_{{event.name.capitalized}}Count: BigInt.fromInt(0),
    {{/each}}
  {{/each}}
}

{{#with imported_contracts.[0] as | contract |}}
    {{#with contract.codegen_events.[0] as | event |}}
describe("{{contract.name.capitalized}} contract {{event.name.capitalized}} event tests", () => {
  // Create mock db
  let mockDbInitial = MockDb.createMockDb()

  // Add mock EventsSummaryEntity to mock db
  let mockDbFinal = mockDbInitial.entities.eventsSummary.set(mockEventsSummaryEntity)

  // Creating mock {{contract.name.capitalized}} contract {{event.name.capitalized}} event
  let mock{{contract.name.capitalized}}{{event.name.capitalized}}Event = {{contract.name.capitalized}}.{{event.name.capitalized}}.createMockEvent({
    {{#each event.params as | param |}}
    {{param.param_name.uncapitalized}}: {{param.default_value}},
    {{/each}}
    mockEventData: {
      chainId: 1,
      blockNumber: 0,
      blockTimestamp: 0,
      blockHash: Ethers.Constants.zeroHash,
      srcAddress: Ethers.Addresses.defaultAddress,
      transactionHash: Ethers.Constants.zeroHash,
      transactionIndex: 0,
      logIndex: 0,
    },
  })

  // Processing the event
  let mockDbUpdated = {{contract.name.capitalized}}.{{event.name.capitalized}}.processEvent({
    event: mock{{contract.name.capitalized}}{{event.name.capitalized}}Event,
    mockDb: mockDbFinal,
  })

  it("{{contract.name.capitalized}}_{{event.name.capitalized}}Entity is created correctly", () => {
    // Getting the actual entity from the mock database
    let actual{{contract.name.capitalized}}{{event.name.capitalized}}Entity =
      mockDbUpdated.entities.{{contract.name.uncapitalized}}_{{event.name.capitalized}}.get(
        mock{{contract.name.capitalized}}{{event.name.capitalized}}Event.transactionHash ++ mock{{contract.name.capitalized}}{{event.name.capitalized}}Event.logIndex->Belt.Int.toString,
      )->Option.getExn

    // Creating the expected entity
    let expected{{contract.name.capitalized}}{{event.name.capitalized}}Entity: Types.{{contract.name.uncapitalized}}_{{event.name.capitalized}}Entity = {
      id: mock{{contract.name.capitalized}}{{event.name.capitalized}}Event.transactionHash ++ mock{{contract.name.capitalized}}{{event.name.capitalized}}Event.logIndex->Belt.Int.toString,
      {{#each event.params as |param|}}
      {{param.param_name.uncapitalized}}: mock{{contract.name.capitalized}}{{event.name.capitalized}}Event.params.{{param.param_name.uncapitalized}}{{#if param.is_eth_address}}->Ethers.ethAddressToString{{/if}},
      {{/each}}
      eventsSummary: globalEventsSummaryKey,
    }
    //Assert the expected {{contract.name.capitalized}} {{event.name.capitalized}} entity
    Assert.deep_equal(
      actual{{contract.name.capitalized}}{{event.name.capitalized}}Entity,
      expected{{contract.name.capitalized}}{{event.name.capitalized}}Entity,
      ~message="Actual {{contract.name.capitalized}}_{{event.name.capitalized}}Entity should be the same as the expected {{contract.name.capitalized}}_{{event.name.capitalized}}Entity",
    )
  })

  it("EventsSummaryEntity is updated correctly", () => {
    // Getting the actual entity from the mock database
    let actualEventsSummaryEntity =
      mockDbUpdated.entities.eventsSummary.get(globalEventsSummaryKey)->Option.getExn

    // Creating the expected entity
    let expectedEventsSummaryEntity: Types.eventsSummaryEntity = {
      ...mockEventsSummaryEntity,
      {{contract.name.uncapitalized}}_{{event.name.capitalized}}Count: mockEventsSummaryEntity.{{contract.name.uncapitalized}}_{{event.name.capitalized}}Count->BigInt.add(BigInt.fromInt(1)),
    }
    // Asserting that the entity in the mock database is the same as the expected entity
    Assert.deep_equal(
      actualEventsSummaryEntity,
      expectedEventsSummaryEntity,
      ~message="Actual EventsSummaryEntity should be the same as the expected EventsSummaryEntity",
    )
  })
})
    {{/with}}
{{/with}}
