name: Release version

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-*"
      - "v*.*.*-*.*"

env:
  CARGO_TERM_COLOR: always

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-20.04

    outputs:
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      release_name: ${{ steps.release_info.outputs.release_name }}
      changelog: ${{ steps.build_changelog.outputs.changelog }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Compute release name and tag
        id: release_info
        run: |
          echo "::set-output name=tag_name::${GITHUB_REF_NAME}"
          echo "::set-output name=release_name::${GITHUB_REF_NAME}"

      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v2
        with:
          configuration: "./.github/changelog.json"
          fromTag: ${{ '' }}
          toTag: ${{ steps.release_info.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    defaults:
      run:
        working-directory: codegenerator
    needs: prepare
    strategy:
      matrix:
        job:
          # The OS is used for the runner
          # The platform is a generic platform name
          # The target is used by Cargo
          # The arch is either 386, arm64 or amd64
          # The svm target platform to use for the binary https://github.com/roynalnaruto/svm-rs/blob/84cbe0ac705becabdc13168bae28a45ad2299749/svm-builds/build.rs#L4-L24
          - os: ubuntu-20.04
            platform: linux
            target: x86_64-unknown-linux-gnu
            arch: amd64
            svm_target_platform: linux-amd64
            name: linux-x64-glibc

          - os: ubuntu-20.04
            platform: linux
            target: aarch64-unknown-linux-gnu
            arch: arm64
            svm_target_platform: linux-aarch64
            name: linux-arm64-glibc

          - os: macos-latest
            platform: darwin
            target: x86_64-apple-darwin
            arch: amd64
            svm_target_platform: macosx-amd64
            name: darwin-x64

          - os: macos-latest
            platform: darwin
            target: aarch64-apple-darwin
            arch: arm64
            svm_target_platform: macosx-aarch64
            name: darwin-arm64

          # NPM publish broken for windows ðŸ˜¿
          - os: windows-latest
            platform: win32
            target: x86_64-pc-windows-msvc
            arch: amd64
            svm_target_platform: windows-amd64
            name: win32-x64-msvc

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: Apple M1 setup
        if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: Linux ARM setup
        if: ${{ matrix.job.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build binaries
        uses: actions-rs/cargo@v1
        env:
          SVM_TARGET_PLATFORM: ${{ matrix.job.svm_target_platform }}
        with:
          command: build
          args: --release --bins --target ${{ matrix.job.target }} --manifest-path codegenerator/Cargo.toml

      - name: Archive binaries
        id: artifacts
        env:
          PLATFORM_NAME: ${{ matrix.job.platform }}
          TARGET: ${{ matrix.job.target }}
          ARCH: ${{ matrix.job.arch }}
          VERSION_NAME: ${{ needs.prepare.outputs.tag_name }}
        run: |
          if [ "$PLATFORM_NAME" == "linux" ]; then
            tar -czvf "envio_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release envio
            echo "::set-output name=file_name::envio_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz"
          elif [ "$PLATFORM_NAME" == "darwin" ]; then
            # We need to use gtar here otherwise the archive is corrupt.
            # See: https://github.com/actions/virtual-environments/issues/2619
            gtar -czvf "envio_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release envio
            echo "::set-output name=file_name::envio_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz"
          else
            cd ./target/${TARGET}/release
            7z a -tzip "envio_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" envio.exe
            mv "envio_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" ../../../
            echo "::set-output name=file_name::envio_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip"
          fi
        shell: bash

      - name: Build man page
        id: man
        if: ${{ matrix.job.target == 'x86_64-unknown-linux-gnu' }}
        env:
          PLATFORM_NAME: ${{ matrix.job.platform }}
          TARGET: ${{ matrix.job.target }}
          VERSION_NAME: ${{ needs.prepare.outputs.tag_name }}
        run: |
          sudo apt-get -y install help2man
          help2man -N ./target/${TARGET}/release/envio > envio.1
          gzip envio.1
          tar -czvf "envio_man_${VERSION_NAME}.tar.gz" envio.1.gz
          echo "::set-output name=envio_man::envio_man_${VERSION_NAME}.tar.gz"
        shell: bash

      # Creates the release for this specific version
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.prepare.outputs.release_name }}
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          prerelease: true #always true for now
          body: ${{ needs.prepare.outputs.changelog }}
          files: |
            codegenerator/${{ steps.artifacts.outputs.file_name }}
            codegenerator/${{ steps.man.outputs.envio_man }}

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: "18.16.0"
          registry-url: "https://registry.npmjs.org"

      - name: Publish to NPM
        shell: bash
        env:
          TARGET: ${{ matrix.job.target }}
          NAME: ${{ matrix.job.name }}
          OS: ${{ matrix.job.os }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          version: ${{ needs.prepare.outputs.tag_name }}
        run: |
          cd npm
          bin="envio"
          node_os=$(echo "${NAME}" | cut -d '-' -f1)
          export node_os
          node_arch=$(echo "${NAME}" | cut -d '-' -f2)
          export node_arch
          if [ "${OS}" = "windows-2022" ]; then
            export node_pkg="${bin}-windows-${node_arch}"
          else
            export node_pkg="${bin}-${node_os}-${node_arch}"
          fi
          mkdir -p "${node_pkg}/bin"
          envsubst < package.json.tmpl > "${node_pkg}/package.json"
          if [ "${OS}" = "windows-2022" ]; then
            bin="${bin}.exe"
          fi
          cp "../target/${TARGET}/release/${bin}" "${node_pkg}/bin"
          cp ../README.md "${node_pkg}"
          cd "${node_pkg}"
          npm publish --access public

  publish-npm:
    name: Publish the base package to NPM
    needs:
      - "release"
      - "prepare"
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: codegenerator/npm/envio
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: "18.16.0"
          registry-url: "https://registry.npmjs.org"
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Publish the package
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          version: ${{ needs.prepare.outputs.tag_name }}
        run: |
          envsubst < ./package.json.tmpl > "package.json"
          pnpm install --no-frozen-lockfile
          pnpm build
          cp ../../README.md .
          npm publish --access public
